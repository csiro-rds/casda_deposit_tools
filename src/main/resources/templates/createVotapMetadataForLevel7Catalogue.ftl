<#ftl encoding="UTF-8" strip_whitespace=true >
<#import "level7Common.ftl" as common>
<#-- View model is: -->
<#--   schema -->
<#--   level7CatalogueName -->
<#--   level7CatalogueTableDescription -->
<#--   columns -->
<#--   projectCode -->
-- TAP metadata creation script for ${level7CatalogueTableDescription!level7CatalogueName}
-- Generated by CASDA Data Deposit on ${generationDate}

<#-- Update params for previous version to point at the new version -->
UPDATE ${schema}.tap_tables
SET params = regexp_replace(params, 'Latest version : v[0-9]+', 'Latest version : v${level7CatalogueVersion}')
WHERE '${schema}.'||db_table_name in
(SELECT entries_table_name 
FROM casda.catalogue c 
INNER JOIN casda.level7_collection lc on c.level7_collection_id = lc.id 
WHERE lc.dc_common_id = ${level7DcCommonId} 
  AND entries_table_name similar to '${schema}.${level7CatalogueBaseName}_v(0|1|2|3|4|5|6|7|8|9)+');


<#-- insert the new TAP schema (project code) if it doesn't already exist -->
INSERT INTO ${schema}.tap_schemas (schema_name, description)
    SELECT '${projectCode}', 'Derived catalogues for project ${projectCode}'
    WHERE NOT EXISTS (
    (SELECT * from ${schema}.tap_schemas WHERE schema_name = '${projectCode}'));

<#-- fullTableName is the qualified TAP table name, using the project code as the schema name -->
<#assign fullTableName=projectCode+"."+level7CatalogueName>
<#-- ------------------------------------- -->
<#-- Create the TAP metadata for the table -->
INSERT INTO ${schema}.tap_tables (schema_name, table_name, table_type, db_schema_name, db_table_name, description, scs_enabled, params )
VALUES ('${projectCode}', '${fullTableName}', 'table', '${schema}', '${level7CatalogueName}', '${level7CatalogueTableDescription!"ASKAP Level 7 catalogue"}', true,
'${params}');

<#-- --------------------------------------- -->
<#-- Create the TAP metadata for each column -->
<#-- TODO: Need a source for the principal, indexed, std and scs_verbosity. 
     We could detect our known fields (id, ra, dec) and make these 1 for all, and default all others to 0 for the flags and 3 for verbosity
      -->
<#assign colCount=3>
INSERT INTO ${schema}.tap_columns (column_order, db_column_name, table_name, datatype, size, principal, indexed, std, description, column_name,  ucd, unit, scs_verbosity )
VALUES 
(1, 'id', '${fullTableName}', 'BIGINT', 19, 1, 1, 1, 'Primary key', 'id', 'meta.record', null, 1),
(2, 'catalogue_id', '${fullTableName}', 'BIGINT', 19, 1, 1, 1, 'Catalogue identifier', 'catalogue_id', null, null, 3),
<#list columns as column>
<#assign indexed = 0 />
<#assign principal = 0 />
<#assign scsVerbosity = 3 />
<#if column.indexed>
	<#assign indexed = 1 />
	<#assign scsVerbosity = 2 />
</#if>
<#if column.principal>
	<#assign principal = 1 />
	<#assign scsVerbosity = 1 />
</#if>
<#if column.unit??>
    <#assign columnunit = "'${column.unit!}'" />
<#else>
    <#assign columnunit = "null" />
</#if>
<#if column.ucd??>
    <#assign columnucd = "'${column.ucd!}'" />
<#else>
    <#assign columnucd = "null" />
</#if>
(${colCount}, '${column.db_column_name?lower_case}', '${fullTableName}', '<@common.getVotapColumnTypeForVotableField field=column />', <@common.getVotapColumnSizeForVotableField field=column />, <#t>
${principal}, ${indexed}, 1, '${column.description!}', '${column.column_name?lower_case}', ${columnucd}, ${columnunit}, ${scsVerbosity})<#if column_has_next>,</#if>
	<#assign colCount=colCount+1>
</#list>
;

<#-- -------------------------------------------- -->
<#-- Create the TAP metadata for the foreign keys -->
INSERT INTO ${schema}.tap_keys (key_id, from_table, target_table, description )
VALUES ((SELECT max(cast(numericalkeys.nums[1] as int)) + 1 from (SELECT regexp_matches(key_id, '^\d+$') as nums from ${schema}.tap_keys) as numericalkeys), '${fullTableName}', '${schema}.catalogue', 'Foreign key from ${level7CatalogueName} to catalogue table');

INSERT INTO ${schema}.tap_key_columns (id, key_id, from_column, target_column, from_table, target_table )
VALUES ((SELECT max(id) + 1 from ${schema}.tap_key_columns), (SELECT key_id FROM ${schema}.tap_keys where from_table = '${fullTableName}' and target_table = '${schema}.catalogue'), 'catalogue_id', 'id', '${fullTableName}', '${schema}.catalogue');
